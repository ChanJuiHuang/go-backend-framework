definitions:
  admin.AdminCreateGroupingPolicyRequest:
    properties:
      subjects:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - subjects
    - user_id
    type: object
  admin.AdminCreateGroupingPolicyResponse:
    properties:
      subjects:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - subjects
    - user_id
    type: object
  admin.AdminCreatePolicyRequest:
    properties:
      rules:
        items:
          $ref: '#/definitions/admin.Rule'
        type: array
      subject:
        type: string
    required:
    - rules
    - subject
    type: object
  admin.AdminCreatePolicyResponse:
    properties:
      rules:
        items:
          $ref: '#/definitions/admin.Rule'
        type: array
      subject:
        type: string
    required:
    - rules
    - subject
    type: object
  admin.AdminDeleteGroupingPolicyRequest:
    properties:
      subjects:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - subjects
    - user_id
    type: object
  admin.AdminDeleteGroupingPolicyResponse:
    properties:
      subjects:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - subjects
    - user_id
    type: object
  admin.AdminDeletePolicyRequest:
    properties:
      rules:
        items:
          $ref: '#/definitions/admin.Rule'
        type: array
      subject:
        type: string
    required:
    - rules
    - subject
    type: object
  admin.AdminDeletePolicyResponse:
    properties:
      rules:
        items:
          $ref: '#/definitions/admin.Rule'
        type: array
      subject:
        type: string
    required:
    - rules
    - subject
    type: object
  admin.AdminDeletePolicySubjectRequest:
    properties:
      subjects:
        items:
          type: string
        type: array
    required:
    - subjects
    type: object
  admin.AdminDeletePolicySubjectResponse:
    properties:
      subjects:
        items:
          type: string
        type: array
    required:
    - subjects
    type: object
  admin.AdminGetGroupingPolicyResponse:
    properties:
      subjects:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - subjects
    - user_id
    type: object
  admin.AdminGetPolicySubjectResponse:
    properties:
      rules:
        items:
          $ref: '#/definitions/admin.Rule'
        type: array
      subject:
        type: string
    required:
    - rules
    - subject
    type: object
  admin.AdminSearchPolicySubjectResponse:
    properties:
      subjects:
        items:
          type: string
        type: array
    required:
    - subjects
    type: object
  admin.Rule:
    properties:
      action:
        enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        type: string
      object:
        type: string
    required:
    - action
    - object
    type: object
  response.Debug:
    properties:
      error:
        example: error message
        type: string
      stacktrace:
        items:
          type: string
        type: array
    required:
    - error
    - stacktrace
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      context:
        additionalProperties: {}
        type: object
      debug:
        $ref: '#/definitions/response.Debug'
      message:
        type: string
    required:
    - code
    - message
    type: object
  user.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.UserLoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  user.UserMeResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    required:
    - created_at
    - email
    - id
    - name
    - updated_at
    type: object
  user.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.UserRegisterResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  user.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  user.UserUpdateResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    required:
    - created_at
    - email
    - id
    - name
    - updated_at
    type: object
host: localhost:8080
info:
  contact: {}
  title: Example API
  version: "1.0"
paths:
  /api/admin/grouping-policy:
    delete:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: delete grouping policy
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminDeleteGroupingPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminDeleteGroupingPolicyResponse'
        "400":
          description: 'code: 400-001(delete grouping policy failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminGetGroupingPolicyResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create grouping policy
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminCreateGroupingPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminCreateGroupingPolicyResponse'
        "400":
          description: 'code: 400-001(add grouping policy is failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
  /api/admin/policy:
    delete:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: delete policy
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminDeletePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminDeletePolicyResponse'
        "400":
          description: 'code: 400-001(delete policy failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create policy
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminCreatePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminCreatePolicyResponse'
        "400":
          description: 'code: 400-001(add policy is failed), 400-002(request validation
            failed), 400-005(one of policy is repeat)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
  /api/admin/policy/reload:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: 'code: 400-001(load policy is failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
  /api/admin/policy/subject:
    delete:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: delete policy subject
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminDeletePolicySubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminDeletePolicySubjectResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminSearchPolicySubjectResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
  /api/admin/policy/subject/{subject}:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: subject
        in: path
        name: subject
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.AdminGetPolicySubjectResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin
  /api/ping:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "pong"}'
          schema:
            type: string
  /api/user:
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: update user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserUpdateResponse'
        "400":
          description: 'code: 400-001(update user failed, get user failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: login user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserLoginResponse'
        "400":
          description: 'code: 400-001(issue access token failed, issue refresh token
            failed), 400-002(request validation failed), 400-003(email is wrong),
            400-004(password is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/me:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserMeResponse'
        "400":
          description: 'code: 400-001(get user failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserRegisterResponse'
        "400":
          description: 'code: 400-001(issue access token failed, issue refresh token
            failed), 400-002(request validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
schemes:
- http
- https
swagger: "2.0"
