definitions:
  github_com_ChanJuiHuang_go-backend-framework_internal_http_controller_admin_user.UserData:
    properties:
      created_at:
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/user.RoleData'
        type: array
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - email
    - id
    - name
    - roles
    - updated_at
    type: object
  github_com_ChanJuiHuang_go-backend-framework_internal_http_controller_user.UserData:
    properties:
      created_at:
        format: date-time
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - email
    - id
    - name
    - updated_at
    type: object
  httpapi.HttpApiData:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        type: integer
      method:
        type: string
      path:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - id
    - method
    - path
    - updated_at
    type: object
  httpapi.HttpApiSearchData:
    properties:
      http_apis:
        items:
          $ref: '#/definitions/httpapi.HttpApiData'
        type: array
      last_page:
        type: integer
      total:
        type: integer
    required:
    - http_apis
    - last_page
    - total
    type: object
  permission.HttpApiData:
    properties:
      method:
        type: string
      path:
        type: string
    required:
    - method
    - path
    type: object
  permission.PermissionCreateData:
    properties:
      created_at:
        format: date-time
        type: string
      http_apis:
        items:
          $ref: '#/definitions/permission.HttpApiData'
        type: array
      id:
        type: integer
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - http_apis
    - id
    - name
    - updated_at
    type: object
  permission.PermissionCreateRequest:
    properties:
      http_apis:
        items:
          properties:
            method:
              type: string
            path:
              type: string
          required:
          - method
          - path
          type: object
        minItems: 1
        type: array
      name:
        type: string
    required:
    - http_apis
    - name
    type: object
  permission.PermissionData:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - id
    - name
    - updated_at
    type: object
  permission.PermissionDeleteRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  permission.PermissionGetData:
    properties:
      created_at:
        format: date-time
        type: string
      http_apis:
        items:
          $ref: '#/definitions/permission.HttpApiData'
        type: array
      id:
        type: integer
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - http_apis
    - id
    - name
    - updated_at
    type: object
  permission.PermissionSearchData:
    properties:
      last_page:
        type: integer
      permissions:
        items:
          $ref: '#/definitions/permission.PermissionData'
        type: array
      total:
        type: integer
    required:
    - last_page
    - permissions
    - total
    type: object
  permission.PermissionSearchRequest:
    properties:
      name:
        type: string
      order_by:
        type: string
      page:
        minimum: 1
        type: integer
      per_page:
        minimum: 10
        type: integer
    required:
    - page
    - per_page
    type: object
  permission.PermissionUpdateData:
    properties:
      created_at:
        format: date-time
        type: string
      http_apis:
        items:
          $ref: '#/definitions/permission.HttpApiData'
        type: array
      id:
        type: integer
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - http_apis
    - id
    - name
    - updated_at
    type: object
  permission.PermissionUpdateRequest:
    properties:
      http_apis:
        items:
          properties:
            method:
              type: string
            path:
              type: string
          required:
          - method
          - path
          type: object
        minItems: 1
        type: array
      name:
        type: string
    required:
    - http_apis
    - name
    type: object
  permission.RoleCreateRequest:
    properties:
      is_public:
        type: boolean
      name:
        type: string
      permission_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - name
    - permission_ids
    type: object
  permission.RoleData:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/permission.PermissionData'
        type: array
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - id
    - is_public
    - name
    - permissions
    - updated_at
    type: object
  permission.RoleDeleteRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  permission.RoleSearchData:
    properties:
      last_page:
        type: integer
      roles:
        items:
          $ref: '#/definitions/permission.RoleData'
        type: array
      total:
        type: integer
    required:
    - last_page
    - roles
    - total
    type: object
  permission.RoleSearchRequest:
    properties:
      is_public:
        type: boolean
      name:
        type: string
      order_by:
        type: string
      page:
        minimum: 1
        type: integer
      per_page:
        minimum: 10
        type: integer
    required:
    - page
    - per_page
    type: object
  permission.RoleUpdateRequest:
    properties:
      is_public:
        type: boolean
      name:
        type: string
      permission_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - name
    - permission_ids
    type: object
  response.Debug:
    properties:
      error:
        example: error message
        type: string
      stacktrace:
        items:
          type: string
        type: array
    required:
    - error
    - stacktrace
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      context:
        additionalProperties: {}
        type: object
      debug:
        $ref: '#/definitions/response.Debug'
      message:
        type: string
    required:
    - code
    - message
    type: object
  response.Response:
    properties:
      data: {}
    required:
    - data
    type: object
  user.RoleData:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      name:
        type: string
      updated_at:
        format: date-time
        type: string
    required:
    - created_at
    - id
    - is_public
    - name
    - updated_at
    type: object
  user.TokenData:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  user.UserGetPolicyData:
    properties:
      rules:
        items:
          type: string
        type: array
    required:
    - rules
    type: object
  user.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.UserRoleUpdateRequest:
    properties:
      role_ids:
        items:
          type: integer
        type: array
      user_id:
        type: integer
    required:
    - role_ids
    - user_id
    type: object
  user.UserUpdatePasswordRequest:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - current_password
    - password
    type: object
  user.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Example API
  version: "1.0"
paths:
  /api/admin/http-api:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - in: query
        name: method
        type: string
      - in: query
        name: order_by
        type: string
      - in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: path
        type: string
      - in: query
        minimum: 10
        name: per_page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/httpapi.HttpApiSearchData'
              type: object
        "400":
          description: 'code: 400-001(search http apis failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-http-api
  /api/admin/permission:
    delete:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: delete permissions
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.PermissionDeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: 'code: 400-001(delete permissions failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: search permissions
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.PermissionSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.PermissionSearchData'
              type: object
        "400":
          description: 'code: 400-001(search permissions failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create permission
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.PermissionCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.PermissionCreateData'
              type: object
        "400":
          description: 'code: 400-001(create permission failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
  /api/admin/permission/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.PermissionGetData'
              type: object
        "400":
          description: 'code: 400-001(get permission failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: update permission
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.PermissionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.PermissionUpdateData'
              type: object
        "400":
          description: 'code: 400-001(update permission failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
  /api/admin/permission/reload:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: 'code: 400-001(reload permission failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
  /api/admin/role:
    delete:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: delete roles
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.RoleDeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: 'code: 400-001(delete roles failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: search roles
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.RoleSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.RoleSearchData'
              type: object
        "400":
          description: 'code: 400-001(search roles failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: create role
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.RoleData'
              type: object
        "400":
          description: 'code: 400-001(create role failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
  /api/admin/role/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: update role
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/permission.RoleData'
              type: object
        "400":
          description: 'code: 400-001(update role failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-permission
  /api/admin/user-role:
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: update user role
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserRoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_ChanJuiHuang_go-backend-framework_internal_http_controller_admin_user.UserData'
              type: object
        "400":
          description: 'code: 400-001(update user role failed), 400-002(request validation
            failed), 400-005(permission is repeat)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch, casbin authorization failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - admin-user
  /api/ping:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "pong"}'
          schema:
            type: string
  /api/user:
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: update user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_ChanJuiHuang_go-backend-framework_internal_http_controller_user.UserData'
              type: object
        "400":
          description: 'code: 400-001(update user failed, get user failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: login user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.TokenData'
              type: object
        "400":
          description: 'code: 400-001(issue access token failed), 400-002(request
            validation failed), 400-003(email is wrong), 400-004(password is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/me:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_ChanJuiHuang_go-backend-framework_internal_http_controller_user.UserData'
              type: object
        "400":
          description: 'code: 400-001(get user failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: update user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: 'code: 400-001(update password failed), 400-002(request validation
            failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/policy:
    get:
      consumes:
      - application/json
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.UserGetPolicyData'
              type: object
        "400":
          description: 'code: 400-001(get user policy failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: 'code: 401-001(access token is wrong)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
  /api/user/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: csrf token
        in: header
        name: X-XSRF-TOKEN
        required: true
        type: string
      - description: register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.TokenData'
              type: object
        "400":
          description: 'code: 400-001(issue access token failed), 400-002(request
            validation failed)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: 'code: 403-001(csrf token mismatch)'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: 'code: 500-001'
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      tags:
      - user
schemes:
- http
- https
swagger: "2.0"
